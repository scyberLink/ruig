import { fetcher } from '../common/SharedFetcher';
import { EXTENSION_SCRIPT, RUIGEM, RUIG_EXTENSION_INTERFACE } from '../common/constants';
import { BUILTIN_EXTENSION, EXTENSION } from '../configs/RestEndpoints';
import { ExtensionId } from './ExtensionId';
import { FileManagement, Table } from '../common/FileManagement';
import { SharedConfig } from '../common/SharedConfig';
class ExtensionLoader {
    extensionFileManager = new FileManagement();
    async load(extension, appContainer) {
        await this.extensionFileManager.open();
        const { fileContent: code } = (await this.extensionFileManager.getFile(`${extension.id}/${RUIGEM}`, Table.METAS)) || {
            fileContent: null,
        };
        if (!code) {
            console.error(`Could not load extension: ${extension.id}`);
        }
        return this.executor(code, appContainer);
    }
    async getExtension(id, builtin = false) {
        const extId = new ExtensionId(id);
        const res = (await fetcher.fetch(`${builtin ? BUILTIN_EXTENSION : EXTENSION}${extId.id}`));
        if (!res || !res.data || !res.data.status) {
            return null;
        }
        return res.data[EXTENSION_SCRIPT];
    }
    executor(code, appContainer) {
        const rei = SharedConfig.get(RUIG_EXTENSION_INTERFACE);
        const expose = { ...rei, appContainer };
        const fn = new Function(RUIG_EXTENSION_INTERFACE, code);
        return fn(expose);
    }
}
export { ExtensionLoader };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXh0ZW5zaW9uTG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRXh0ZW5zaW9uTG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUVqRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLHdCQUF3QixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDeEYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBRXZFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFHM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUNoRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUE7QUFHckQsTUFBTSxlQUFlO0lBQ1gsb0JBQW9CLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQTtJQUVuRCxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQXFCLEVBQUUsWUFBMkI7UUFDM0QsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDdEMsTUFBTSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FDcEUsR0FBRyxTQUFTLENBQUMsRUFBRSxJQUFJLE1BQU0sRUFBRSxFQUMzQixLQUFLLENBQUMsS0FBSyxDQUNaLENBQUMsSUFBSTtZQUNKLFdBQVcsRUFBRSxJQUFJO1NBQ2xCLENBQUE7UUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsT0FBTyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7U0FDM0Q7UUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFBO0lBQzFDLENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQVUsRUFBRSxPQUFPLEdBQUcsS0FBSztRQUM1QyxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUNqQyxNQUFNLEdBQUcsR0FBZSxDQUFDLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBZSxDQUFBO1FBRXBILElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDekMsT0FBTyxJQUFJLENBQUE7U0FDWjtRQUVELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFTyxRQUFRLENBQUMsSUFBWSxFQUFFLFlBQTJCO1FBQ3hELE1BQU0sR0FBRyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQWUsQ0FBQTtRQUNwRSxNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsR0FBRyxFQUFFLFlBQVksRUFBRSxDQUFBO1FBQ3ZDLE1BQU0sRUFBRSxHQUFHLElBQUksUUFBUSxDQUFDLHdCQUF3QixFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ3ZELE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ25CLENBQUM7Q0FDRjtBQUVELE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQSJ9