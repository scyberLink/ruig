import { CONTEXT_MENU, DRAWING_CANVAS, HTML_PARSER, RUIG_EXTENSION_INTERFACE, EXTENSION_POOL, MOUSE_MOVEMENT_ELEMENT, } from '../../../common/constants';
import { SharedConfig } from '../../../common/SharedConfig';
export const createSVGElement = (svgData) => {
    const { xmlns = 'http://www.w3.org/2000/svg', viewBox = '0 0 512 512', path } = svgData;
    const svgElement = document.createElementNS(xmlns, 'svg');
    svgElement.setAttribute('viewBox', viewBox);
    const pathElement = document.createElementNS(xmlns, 'path');
    pathElement.setAttribute('d', path);
    svgElement.appendChild(pathElement);
    return svgElement;
};
export const getMouseMovementElement = () => {
    const mouseMovementElement = SharedConfig.get(MOUSE_MOVEMENT_ELEMENT);
    if (!mouseMovementElement) {
        console.error('mouseMovementElement', 'not yet initialize');
        return;
    }
    return mouseMovementElement;
};
export const getContextMenu = () => {
    const contextMenuInstance = SharedConfig.get(CONTEXT_MENU);
    if (!contextMenuInstance) {
        console.error('contextMenu', 'not yet initialize');
        return;
    }
    return contextMenuInstance;
};
export const getDrawingCanvas = () => {
    const drawingCanvasInstance = SharedConfig.get(DRAWING_CANVAS);
    if (!drawingCanvasInstance) {
        console.error('drawingCanvas', 'not yet initialize');
        return;
    }
    return drawingCanvasInstance;
};
export const getParserContainer = () => {
    const parserContainerInstance = SharedConfig.get(HTML_PARSER);
    if (!parserContainerInstance) {
        console.error('parserContainer', 'not yet initialize');
        return;
    }
    return parserContainerInstance;
};
export const getREI = () => {
    const REIInstance = SharedConfig.get(RUIG_EXTENSION_INTERFACE);
    if (!REIInstance) {
        console.error('REI', 'not yet initialize');
        return;
    }
    return REIInstance;
};
export const getExtensionPool = () => {
    const extensionPoolInstance = SharedConfig.get(EXTENSION_POOL);
    if (!extensionPoolInstance) {
        console.error('extensionPool', 'not yet initialize');
        return;
    }
    return extensionPoolInstance;
};
export const showContextContent = async (contextItems, config) => {
    const context = getContextMenu();
    if (!context) {
        return;
    }
    context.showContextContent(contextItems, config);
};
export const hideContextContent = async (detachAllSession = false) => {
    const context = getContextMenu();
    if (!context) {
        return;
    }
    context.hide(detachAllSession);
};
export const getMouseMovement = () => {
    const mouseMovementElement = getMouseMovementElement();
    if (!mouseMovementElement) {
        return;
    }
    return mouseMovementElement.getDimension();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsWUFBWSxFQUNaLGNBQWMsRUFDZCxXQUFXLEVBQ1gsd0JBQXdCLEVBQ3hCLGNBQWMsRUFDZCxzQkFBc0IsR0FDdkIsTUFBTSwyQkFBMkIsQ0FBQTtBQUVsQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFVM0QsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxPQUEwQixFQUFFLEVBQUU7SUFDN0QsTUFBTSxFQUFFLEtBQUssR0FBRyw0QkFBNEIsRUFBRSxPQUFPLEdBQUcsYUFBYSxFQUFFLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQTtJQUV2RixNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUN6RCxVQUFVLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUUzQyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUMzRCxXQUFXLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUVuQyxVQUFVLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBRW5DLE9BQU8sVUFBVSxDQUFBO0FBQ25CLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLEdBQUcsRUFBRTtJQUMxQyxNQUFNLG9CQUFvQixHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQWtCLENBQUE7SUFDdEYsSUFBSSxDQUFDLG9CQUFvQixFQUFFO1FBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0JBQXNCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQTtRQUMzRCxPQUFNO0tBQ1A7SUFFRCxPQUFPLG9CQUFv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